{
    "title": "Java Fundamentals and Advanced Concepts",
    "questions": [
        {
            "question": "What is the default value of a local variable in Java?",
            "options": {
                "A": "0",
                "B": "null",
                "C": "undefined",
                "D": "No default value"
            },
            "correct_answer": "D",
            "explanation": "Local variables in Java do not have a default value. They must be explicitly initialized before use. Primitive types have default values when they are instance variables, but not as local variables.",
            "difficulty": "Beginner",
            "subtopic": "Variables and Data Types"
        },
        {
            "question": "Which of the following is a type of access modifier in Java?",
            "options": {
                "A": "public",
                "B": "friendly",
                "C": "protected",
                "D": "abstract"
            },
            "correct_answer": "A",
            "explanation": "Public is a type of access modifier in Java, allowing access from anywhere. Friendly is not an access modifier in Java. Protected and abstract are other concepts in Java.",
            "difficulty": "Beginner",
            "subtopic": "Access Modifiers"
        },
        {
            "question": "What is the purpose of the 'finally' block in Java?",
            "options": {
                "A": "To handle exceptions",
                "B": "To execute code regardless of exceptions",
                "C": "To skip exception handling",
                "D": "To throw custom exceptions"
            },
            "correct_answer": "B",
            "explanation": "The finally block in Java is used to execute code regardless of whether an exception is thrown or not. It is often used for resource cleanup.",
            "difficulty": "Intermediate",
            "subtopic": "Exception Handling"
        },
        {
            "question": "What is the difference between '==' and '.equals()' in Java?",
            "options": {
                "A": "'==' checks reference equality, '.equals()' checks object equality",
                "B": "'==' checks object equality, '.equals()' checks reference equality",
                "C": "'==' is used for primitives, '.equals()' is used for objects",
                "D": "'==' is used for objects, '.equals()' is used for primitives"
            },
            "correct_answer": "A",
            "explanation": "The '==' operator checks if both objects point to the same location in memory (reference equality), while the '.equals()' method checks if the objects have the same value (object equality).",
            "difficulty": "Intermediate",
            "subtopic": "Operators and Strings"
        },
        {
            "question": "What is polymorphism in Java?",
            "options": {
                "A": "Method overriding",
                "B": "Method overloading",
                "C": "The ability of an object to take on multiple forms",
                "D": "Inheritance"
            },
            "correct_answer": "C",
            "explanation": "Polymorphism in Java is the ability of an object to take on multiple forms. This can be achieved through method overriding, method overloading, or operator overloading.",
            "difficulty": "Intermediate",
            "subtopic": "Object-Oriented Programming"
        },
        {
            "question": "What is the purpose of the 'abstract' keyword in Java?",
            "options": {
                "A": "To define an interface",
                "B": "To define an abstract class",
                "C": "To define a concrete class",
                "D": "To define a constructor"
            },
            "correct_answer": "B",
            "explanation": "The 'abstract' keyword in Java is used to define an abstract class, which cannot be instantiated and is meant to be inherited by other classes.",
            "difficulty": "Intermediate",
            "subtopic": "Object-Oriented Programming"
        },
        {
            "question": "What is the difference between a 'Checked' and 'Unchecked' exception in Java?",
            "options": {
                "A": "Checked exceptions are handled at compile-time, unchecked exceptions are handled at runtime",
                "B": "Checked exceptions are handled at runtime, unchecked exceptions are handled at compile-time",
                "C": "Checked exceptions are subclasses of RuntimeException, unchecked exceptions are subclasses of IOException",
                "D": "Checked exceptions are subclasses of IOException, unchecked exceptions are subclasses of RuntimeException"
            },
            "correct_answer": "A",
            "explanation": "Checked exceptions in Java are checked at compile-time and must be handled using try-catch blocks or declared in the method signature. Unchecked exceptions are not checked at compile-time and are subclasses of RuntimeException.",
            "difficulty": "Advanced",
            "subtopic": "Exception Handling"
        },
        {
            "question": "What is a 'Functional Interface' in Java?",
            "options": {
                "A": "An interface with multiple abstract methods",
                "B": "An interface with a single abstract method",
                "C": "A class with multiple abstract methods",
                "D": "A class with a single abstract method"
            },
            "correct_answer": "B",
            "explanation": "A functional interface in Java is an interface with a single abstract method, allowing it to be used as the target of a lambda expression.",
            "difficulty": "Advanced",
            "subtopic": "Lambda Expressions and Functional Programming"
        },
        {
            "question": "What is the purpose of the 'stream()' method in Java?",
            "options": {
                "A": "To create a parallel stream",
                "B": "To create a sequential stream",
                "C": "To convert a collection to an array",
                "D": "To convert an array to a collection"
            },
            "correct_answer": "B",
            "explanation": "The 'stream()' method in Java is used to create a sequential stream from a collection, allowing for functional-style operations on the data.",
            "difficulty": "Advanced",
            "subtopic": "Lambda Expressions and Functional Programming"
        },
        {
            "question": "What is the difference between 'Path' and 'Paths' in Java?",
            "options": {
                "A": "Path is a class, Paths is a method",
                "B": "Path is an interface, Paths is a class",
                "C": "Path is an interface, Paths is a utility class",
                "D": "Path is a utility class, Paths is an interface"
            },
            "correct_answer": "C",
            "explanation": "Path is an interface in Java, representing a path in a file system. Paths is a utility class, providing methods for working with paths.",
            "difficulty": "Advanced",
            "subtopic": "File Input/Output"
        },
        {
            "question": "What is the purpose of the 'Optional' class in Java?",
            "options": {
                "A": "To represent a null value",
                "B": "To represent an empty collection",
                "C": "To represent a value that may or may not be present",
                "D": "To represent a primitive type"
            },
            "correct_answer": "C",
            "explanation": "The Optional class in Java is used to represent a value that may or may not be present, providing a way to avoid null pointer exceptions.",
            "difficulty": "Advanced",
            "subtopic": "Functional Programming"
        },
        {
            "question": "What is the difference between a 'HashMap' and a 'LinkedHashMap' in Java?",
            "options": {
                "A": "HashMap is sorted, LinkedHashMap is unsorted",
                "B": "HashMap is unsorted, LinkedHashMap is sorted",
                "C": "HashMap preserves insertion order, LinkedHashMap does not",
                "D": "HashMap does not preserve insertion order, LinkedHashMap does"
            },
            "correct_answer": "D",
            "explanation": "HashMap in Java does not preserve the insertion order of elements, while LinkedHashMap does.",
            "difficulty": "Expert",
            "subtopic": "Collections Framework"
        },
        {
            "question": "What is the purpose of the 'finalize()' method in Java?",
            "options": {
                "A": "To garbage collect an object",
                "B": "To release system resources",
                "C": "To clone an object",
                "D": "To serialize an object"
            },
            "correct_answer": "B",
            "explanation": "The finalize() method in Java is used to release system resources before an object is garbage collected.",
            "difficulty": "Expert",
            "subtopic": "Memory Management"
        },
        {
            "question": "What is the difference between a 'SoftReference' and a 'WeakReference' in Java?",
            "options": {
                "A": "SoftReference is stronger than WeakReference",
                "B": "WeakReference is stronger than SoftReference",
                "C": "SoftReference is used for caching, WeakReference is used for debugging",
                "D": "WeakReference is used for caching, SoftReference is used for debugging"
            },
            "correct_answer": "A",
            "explanation": "SoftReference in Java is stronger than WeakReference. SoftReferences are used for caching, as they are less likely to be garbage collected than WeakReferences.",
            "difficulty": "Expert",
            "subtopic": "Memory Management"
        },
        {
            "question": "What is the purpose of the 'wait()' and 'notify()' methods in Java?",
            "options": {
                "A": "To start and stop threads",
                "B": "To synchronize access to shared resources",
                "C": "To communicate between threads",
                "D": "To handle exceptions"
            },
            "correct_answer": "C",
            "explanation": "The wait() and notify() methods in Java are used to communicate between threads, allowing them to coordinate and synchronize their actions.",
            "difficulty": "Expert",
            "subtopic": "Multithreading"
        },
        {
            "question": "What is the difference between a 'Callable' and a 'Runnable' in Java?",
            "options": {
                "A": "Callable returns a value, Runnable does not",
                "B": "Runnable returns a value, Callable does not",
                "C": "Callable is used for asynchronous execution, Runnable is used for synchronous execution",
                "D": "Runnable is used for asynchronous execution, Callable is used for synchronous execution"
            },
            "correct_answer": "A",
            "explanation": "Callable in Java returns a value, while Runnable does not. Callable is often used for asynchronous execution, while Runnable is used for synchronous execution.",
            "difficulty": "Master",
            "subtopic": "Multithreading"
        }
    ]
}